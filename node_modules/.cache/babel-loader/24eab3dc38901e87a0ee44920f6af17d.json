{"ast":null,"code":"import { UrlConstants } from './UrlConstants';\nimport { authHeader } from '../helpers/auth-header';\nimport Axios from 'axios';\nexport const commonService = {\n  getRequestMethod,\n  putRequestMethod,\n  postRequestMethod,\n  postUploadPicRequestMethod\n}; // get request method\n\nasync function getRequestMethod(requestUrl) {\n  const jwtToken = localStorage.getItem(\"token\");\n  console.log('common service called---');\n  let res = await Axios({\n    method: 'get',\n    url: UrlConstants.BASE_URL + requestUrl,\n    headers: {\n      jwtToken: jwtToken\n    }\n  });\n  console.log(res);\n  return res;\n} // put request method\n\n\nasync function putRequestMethod(requesturl, requestdata) {\n  const requestOptions = {\n    method: 'PUT',\n    headers: { ...authHeader(),\n      'Content-Type': 'application/json',\n      'platform': 'web'\n    },\n    body: JSON.stringify(requestdata)\n  };\n  console.log('requestdata-----', requestdata);\n  const response = await Axios({\n    method: 'put',\n    url: UrlConstants.BASE_URL + requesturl,\n    data: requestdata\n  });\n  return response;\n} // post request method\n\n\nasync function postRequestMethod(requesturl, requestdata, jwtToken) {\n  console.log('jwtToken in commonservice', jwtToken);\n  let res = await Axios({\n    method: 'post',\n    url: UrlConstants.BASE_URL + requesturl,\n    data: requestdata,\n    headers: {\n      jwtToken: jwtToken\n    }\n  });\n  console.log(res);\n  return res;\n} // post request method For profilepic epload\n\n\nasync function postUploadPicRequestMethod(requesturl, requestdata) {\n  const requestOptions = {\n    method: 'POST',\n    headers: { ...authHeader()\n    },\n    body: requestdata\n  };\n  let res = await Axios({\n    method: 'get',\n    url: UrlConstants.BASE_URL\n  });\n  return res;\n}","map":{"version":3,"sources":["/Users/apple/Desktop/react/pedinailsweb/src/services/CommonService.tsx"],"names":["UrlConstants","authHeader","Axios","commonService","getRequestMethod","putRequestMethod","postRequestMethod","postUploadPicRequestMethod","requestUrl","jwtToken","localStorage","getItem","console","log","res","method","url","BASE_URL","headers","requesturl","requestdata","requestOptions","body","JSON","stringify","response","data"],"mappings":"AACA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAMC,aAAa,GAAG;AACzBC,EAAAA,gBADyB;AAEzBC,EAAAA,gBAFyB;AAGzBC,EAAAA,iBAHyB;AAIzBC,EAAAA;AAJyB,CAAtB,C,CAOP;;AACA,eAAeH,gBAAf,CAAgCI,UAAhC,EAAiD;AAC7C,QAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAjB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AAEA,MAAIC,GAAG,GAAG,MAAMZ,KAAK,CACjB;AAAIa,IAAAA,MAAM,EAAE,KAAZ;AACIC,IAAAA,GAAG,EAAEhB,YAAY,CAACiB,QAAb,GAAwBT,UADjC;AAEIU,IAAAA,OAAO,EAAC;AAACT,MAAAA,QAAQ,EAACA;AAAV;AAFZ,GADiB,CAArB;AAKIG,EAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AAEJ,SAAOA,GAAP;AACH,C,CAED;;;AAEA,eAAeT,gBAAf,CAAgCc,UAAhC,EAAiDC,WAAjD,EAAmE;AAC/D,QAAMC,cAAc,GAAG;AACnBN,IAAAA,MAAM,EAAE,KADW;AAEnBG,IAAAA,OAAO,EAAE,EAAE,GAAGjB,UAAU,EAAf;AAAmB,sBAAgB,kBAAnC;AAAuD,kBAAY;AAAnE,KAFU;AAGnBqB,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,WAAf;AAHa,GAAvB;AAKAR,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAA+BO,WAA/B;AACA,QAAMK,QAAQ,GAAG,MAAMvB,KAAK,CACxB;AACIa,IAAAA,MAAM,EAAE,KADZ;AAEIC,IAAAA,GAAG,EAAEhB,YAAY,CAACiB,QAAb,GAAsBE,UAF/B;AAGIO,IAAAA,IAAI,EAACN;AAHT,GADwB,CAA5B;AAMI,SAAOK,QAAP;AAEP,C,CACD;;;AACA,eAAenB,iBAAf,CAAiCa,UAAjC,EAAkDC,WAAlD,EAAmEX,QAAnE,EAAiF;AAC7EG,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAwCJ,QAAxC;AACA,MAAIK,GAAG,GAAG,MAAMZ,KAAK,CACjB;AACIa,IAAAA,MAAM,EAAE,MADZ;AAEIC,IAAAA,GAAG,EAAEhB,YAAY,CAACiB,QAAb,GAAsBE,UAF/B;AAGIO,IAAAA,IAAI,EAACN,WAHT;AAIIF,IAAAA,OAAO,EAAC;AACJT,MAAAA,QAAQ,EAACA;AADL;AAJZ,GADiB,CAArB;AAUIG,EAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AAEJ,SAAOA,GAAP;AAEH,C,CACD;;;AACA,eAAeP,0BAAf,CAA0CY,UAA1C,EAA2DC,WAA3D,EAA6E;AACzE,QAAMC,cAAc,GAAG;AACnBN,IAAAA,MAAM,EAAE,MADW;AAEnBG,IAAAA,OAAO,EAAE,EAAE,GAAGjB,UAAU;AAAf,KAFU;AAGnBqB,IAAAA,IAAI,EAAEF;AAHa,GAAvB;AAKA,MAAIN,GAAG,GAAG,MAAMZ,KAAK,CACjB;AACIa,IAAAA,MAAM,EAAE,KADZ;AAEIC,IAAAA,GAAG,EAAEhB,YAAY,CAACiB;AAFtB,GADiB,CAArB;AAKA,SAAOH,GAAP;AAEH","sourcesContent":["import React from 'react';\r\nimport { UrlConstants } from './UrlConstants';\r\nimport { authHeader } from '../helpers/auth-header';\r\nimport Axios from 'axios'\r\nexport const commonService = {\r\n    getRequestMethod,\r\n    putRequestMethod,\r\n    postRequestMethod,\r\n    postUploadPicRequestMethod\r\n\r\n};\r\n// get request method\r\nasync function getRequestMethod(requestUrl: any) {\r\n    const jwtToken = localStorage.getItem(\"token\") as string;\r\n\r\n    console.log('common service called---');\r\n    \r\n    let res = await Axios(\r\n        {   method: 'get',\r\n            url: UrlConstants.BASE_URL + requestUrl,\r\n            headers:{jwtToken:jwtToken}\r\n        })  \r\n        console.log(res);\r\n              \r\n    return res\r\n}\r\n\r\n// put request method\r\n\r\nasync function putRequestMethod(requesturl: any, requestdata: any) {\r\n    const requestOptions = {\r\n        method: 'PUT',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json', 'platform': 'web' },\r\n        body: JSON.stringify(requestdata)\r\n    };\r\n    console.log('requestdata-----',requestdata);\r\n    const response = await Axios(\r\n        {\r\n            method: 'put',\r\n            url: UrlConstants.BASE_URL+requesturl,\r\n            data:requestdata\r\n        })\r\n        return response\r\n\r\n}\r\n// post request method\r\nasync function postRequestMethod(requesturl: any, requestdata: any,jwtToken:any) {\r\n    console.log('jwtToken in commonservice',jwtToken);\r\n    let res = await Axios(\r\n        {\r\n            method: 'post',\r\n            url: UrlConstants.BASE_URL+requesturl,\r\n            data:requestdata,\r\n            headers:{\r\n                jwtToken:jwtToken\r\n            }\r\n            \r\n        },)\r\n        console.log(res);\r\n        \r\n    return res\r\n    \r\n}\r\n// post request method For profilepic epload\r\nasync function postUploadPicRequestMethod(requesturl: any, requestdata: any) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader() },\r\n        body: requestdata\r\n    };\r\n    let res = await Axios(\r\n        {\r\n            method: 'get',\r\n            url: UrlConstants.BASE_URL,\r\n        })\r\n    return res\r\n    \r\n}\r\n"]},"metadata":{},"sourceType":"module"}